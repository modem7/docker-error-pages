name: tests

on:
  push:
    branches: [master, main]
    tags-ignore: ['**']
    paths-ignore: ['**.md']
  pull_request:
    paths-ignore: ['**.md']
  workflow_dispatch:

jobs: # Docs: <https://git.io/JvxXE>
  gitleaks:
    name: Gitleaks
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with: {fetch-depth: 0}

      - uses: zricethezav/gitleaks-action@v1 # Action page: <https://github.com/zricethezav/gitleaks-action>

  golangci-lint:
    name: Golang-CI (lint)
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Run linter
        uses: golangci/golangci-lint-action@v2 # Action page: <https://github.com/golangci/golangci-lint-action>
        with:
          version: v1.42 # without patch version
          only-new-issues: false # show only new issues if it's a pull request

  go-test:
    name: Unit tests
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/setup-go@v2
        with: {go-version: 1.17}

      - uses: actions/checkout@v2
        with: {fetch-depth: 2} # Fixes codecov error 'Issue detecting commit SHA'

      - name: Go modules Cache # Docs: <https://git.io/JfAKn#go---modules>
        uses: actions/cache@v2
        id: go-cache
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - if: steps.go-cache.outputs.cache-hit != 'false'
        run: go mod download

      - name: Run Unit tests
        run: go test -race -covermode=atomic -coverprofile /tmp/coverage.txt ./...

      - uses: codecov/codecov-action@v2 # https://github.com/codecov/codecov-action
        continue-on-error: true
        with:
          file: /tmp/coverage.txt
          token: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: Build for ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        os: [linux, darwin] # linux, freebsd, darwin, windows
        arch: [amd64]  # amd64, 386
    needs: [golangci-lint, go-test]
    steps:
      - uses: actions/setup-go@v2
        with: {go-version: 1.17}

      - uses: actions/checkout@v2

      - uses: gacts/github-slug@v1
        id: slug

      - name: Go modules Cache # Docs: <https://git.io/JfAKn#go---modules>
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - run: go mod download

      - name: Build application
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
          LDFLAGS: -s -w -X github.com/modem7/docker-error-pages/internal/version.version=${{ steps.slug.outputs.branch-name-slug }}@${{ steps.slug.outputs.commit-hash-short }}
        run: go build -trimpath -ldflags "$LDFLAGS" -o ./error-pages ./cmd/error-pages/

      - name: Try to execute
        if: matrix.os == 'linux'
        run: ./error-pages version && ./error-pages -h

      - uses: actions/upload-artifact@v2
        with:
          name: error-pages-${{ matrix.os }}-${{ matrix.arch }}
          path: error-pages
          if-no-files-found: error
          retention-days: 1

  generate:
    name: Run templates generator
    runs-on: ubuntu-20.04
    needs: [build]
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: error-pages-linux-amd64
          path: .artifact

      - name: Prepare binary file to run
        working-directory: .artifact
        run: mv ./error-pages ./../error-pages && chmod +x ./../error-pages

      - name: Run generator
        run: ./error-pages build ./out --verbose --index

      - name: Test files creation
        run: |
          test -f ./out/index.html
          test -f ./out/ghost/404.html
          test -f ./out/l7-dark/404.html
          test -f ./out/l7-light/404.html
          test -f ./out/shuffle/404.html
          test -f ./out/hacker-terminal/404.html
          test -f ./out/cats/404.html
          test -f ./out/hexxone/404.html
          test -f ./out/parallax/404.html
